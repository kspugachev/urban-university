"""
Практическое задание по теме: "Словари и множества".
Цель: написать программу на языке Python, используя PyCharm, для работы со словарями и множествами.
"""

# Создаем словарь и выводим его содержимое на экран:
my_dict = {'Лена': 1991, 'Костя': 1985, 'Даниил': 2016}
print(my_dict)

# Выводим одно значение из словаря по существующему ключу:
print(my_dict['Даниил'])

# Пробуем вывести на экран одно значение из словаря по несуществующему ключу, но без ошибки:
print(my_dict.get('Оксана'))
# Изменим стандартное сообщение об ошибке:
print(my_dict.get('Оксана', 'Такого ключа нет в словаре!'))

# Добавим ещё две произвольные пары того же формата в словарь:
my_dict.update({'Андрей': 2007, 'Ярослав': 1987})

# Удалим одну из пар в словаре по существующему ключу и выведим значение из этой пары на экран:
unnecessary_pair = my_dict.pop('Костя')
print(unnecessary_pair)

print(my_dict)


# Создаем множество, состоящее из разных типов данных с повторяющимися значениями (включая списки):
# my_set = {4, True, 4, 5, 0.572, (45, 56), False, 'cat', 89, (45, 56), 'cat', False, 5, [4, 5]}
# В результате получаем ошибку, т.к. множество может содержать внутри себя только иммутабельные значения, а список не
# относится к этой категории.

# Создаем множество, состоящее из разных допустимых типов данных с повторяющимися значениями:
my_set = {4, True, 4, 5, 0.572, (45, 56), False, 'cat', 89, (45, 56), 'cat', False, 5}
print(my_set)

# Добавим два произвольных элемента в множество, которых там нет:
my_set.update(['new element', 2024])
# Удалим один элемент из множества, которого там нет:
# my_set.remove(3.14)
# Воспользовавшись этим методом мы получим ошибку, т.к. этого значения нет в представленном множестве.
# Однако есть другой метод, позволяющий избежать ошибки:
my_set.discard(3.14)
# Удалим один элемент из множества, который там есть:
my_set.remove(True)
print(my_set)
# Проведем аналогичную операцию при помощи другого метода:
my_set.discard(False)
print(my_set)
